{"version":3,"sources":["ListItems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","isDisplay","isComplete","key","type","id","value","text","onChange","e","setUpdate","target","onClick","completeItem","icon","faCheck","deleteItem","faTrash","duration","easing","App","state","currentItem","showMenu","handleInput","bind","addItem","closeMenu","filterTodo","this","setState","Date","now","preventDefault","newItem","newItems","filteredItems","filter","event","document","addEventListener","removeEventListener","onSubmit","placeholder","faPlusSquare","faEye","ref","element","dropdownMenu","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.185c1305.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './ListItems.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCheck, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport FlipMove from 'react-flip-move';\r\nfunction ListItems(props) {\r\n\tconst items = props.items;\r\n\tconst listItems = items.map((item) => {\r\n\t\treturn (\r\n\t\t\t<div className={item.isDisplay ? 'noDisplay' : item.isComplete ? 'completed' : 'todo'} key={item.key}>\r\n\t\t\t\t<li className=\"todo-item\">\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tclassName=\"list-input\"\r\n\t\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\t\tid={item.key}\r\n\t\t\t\t\t\tvalue={item.text}\r\n\t\t\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\t\t\tprops.setUpdate(e.target.value, item.key);\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</li>\r\n\t\t\t\t<button className=\"complete-btn\" onClick={() => props.completeItem(item.key)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faCheck} />\r\n\t\t\t\t</button>\r\n\t\t\t\t<button className=\"trash-btn\" onClick={() => props.deleteItem(item.key)}>\r\n\t\t\t\t\t<FontAwesomeIcon icon={faTrash} />\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t});\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<FlipMove duration={300} easing=\"ease-in-out\">\r\n\t\t\t\t{listItems}\r\n\t\t\t</FlipMove>\r\n\t\t</div>\r\n\t);\r\n}\r\nexport default ListItems;\r\n","import React from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlusSquare, faEye } from '@fortawesome/free-solid-svg-icons';\nimport ListItems from './ListItems.js';\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\titems: [],\n\t\t\tcurrentItem: {\n\t\t\t\ttext: '',\n\t\t\t\tkey: '',\n\t\t\t\tisComplete: false,\n\t\t\t\tisDisplay: true\n\t\t\t},\n\t\t\tshowMenu: false\n\t\t};\n\t\tthis.handleInput = this.handleInput.bind(this);\n\t\tthis.addItem = this.addItem.bind(this);\n\t\tthis.deleteItem = this.deleteItem.bind(this);\n\t\tthis.setUpdate = this.setUpdate.bind(this);\n\t\tthis.completeItem = this.completeItem.bind(this);\n\t\tthis.showMenu = this.showMenu.bind(this);\n\t\tthis.closeMenu = this.closeMenu.bind(this);\n\t\tthis.filterTodo = this.filterTodo.bind(this);\n\t}\n\n\thandleInput(e) {\n\t\tthis.setState({\n\t\t\tcurrentItem: {\n\t\t\t\ttext: e.target.value,\n\t\t\t\tkey: Date.now(),\n\t\t\t\tisComplete: false,\n\t\t\t\tisDisplay: false\n\t\t\t}\n\t\t});\n\t}\n\taddItem(e) {\n\t\te.preventDefault();\n\t\tconst newItem = this.state.currentItem;\n\t\tif (newItem.text != '') {\n\t\t\tconst newItems = [ ...this.state.items, newItem ];\n\t\t\tthis.setState({\n\t\t\t\titems: newItems,\n\t\t\t\tcurrentItem: {\n\t\t\t\t\ttext: '',\n\t\t\t\t\tkey: '',\n\t\t\t\t\tisComplete: false,\n\t\t\t\t\tisDisplay: false\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tdeleteItem(key) {\n\t\tconst filteredItems = this.state.items.filter((item) => item.key !== key);\n\t\tthis.setState({ items: filteredItems });\n\t}\n\tsetUpdate(text, key) {\n\t\tconst items = this.state.items;\n\t\titems.map((item) => {\n\t\t\tif (item.key === key) {\n\t\t\t\titem.text = text;\n\t\t\t}\n\t\t});\n\t\tthis.setState({ items: items });\n\t}\n\tcompleteItem(key) {\n\t\tconst items = this.state.items;\n\t\titems.map((item) => {\n\t\t\tif (item.key === key) {\n\t\t\t\titem.isComplete = !item.isComplete;\n\t\t\t}\n\t\t});\n\t\tthis.setState({ items: items });\n\t}\n\n\tshowMenu(event) {\n\t\tevent.preventDefault();\n\n\t\tthis.setState({ showMenu: true }, () => {\n\t\t\tdocument.addEventListener('click', this.closeMenu);\n\t\t});\n\t}\n\n\tcloseMenu() {\n\t\tthis.setState({ showMenu: false }, () => {\n\t\t\tdocument.removeEventListener('click', this.closeMenu);\n\t\t});\n\t}\n\tfilterTodo(e) {\n\t\tconst items = this.state.items;\n\t\titems.map((item) => {\n\t\t\tswitch (e.target.value) {\n\t\t\t\tcase 'all':\n\t\t\t\t\titem.isDisplay = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'completed':\n\t\t\t\t\tif (item.isComplete === false) item.isDisplay = true;\n\t\t\t\t\tif (item.isComplete === true) item.isDisplay = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'not-completed':\n\t\t\t\t\tif (item.isComplete === true) item.isDisplay = true;\n\t\t\t\t\tif (item.isComplete === false) item.isDisplay = false;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<header>\n\t\t\t\t\t<h1>Tasks</h1>\n\t\t\t\t</header>\n\t\t\t\t<form onSubmit={this.addItem}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Enter task!\"\n\t\t\t\t\t\tclassName=\"todo-input\"\n\t\t\t\t\t\tvalue={this.state.currentItem.text}\n\t\t\t\t\t\tonChange={this.handleInput}\n\t\t\t\t\t/>\n\t\t\t\t\t<button className=\"todo-button\" type=\"sumbit\">\n\t\t\t\t\t\t<FontAwesomeIcon icon={faPlusSquare} />\n\t\t\t\t\t</button>\n\t\t\t\t\t<div className=\"filter\">\n\t\t\t\t\t\t<button onClick={this.showMenu} className=\"filter-btn\">\n\t\t\t\t\t\t\t<FontAwesomeIcon icon={faEye} />\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t{this.state.showMenu ? (\n\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\tclassName=\"menu\"\n\t\t\t\t\t\t\t\tref={(element) => {\n\t\t\t\t\t\t\t\t\tthis.dropdownMenu = element;\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t<button value=\"all\" onClick={this.filterTodo}>\n\t\t\t\t\t\t\t\t\tAll\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button value=\"completed\" onClick={this.filterTodo}>\n\t\t\t\t\t\t\t\t\tCompleted\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t<button value=\"not-completed\" onClick={this.filterTodo}>\n\t\t\t\t\t\t\t\t\tIncomplete\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t) : null}\n\t\t\t\t\t</div>\n\t\t\t\t</form>\n\n\t\t\t\t<div className=\"todo-container\">\n\t\t\t\t\t<ul className=\"todo-list\">\n\t\t\t\t\t\t<ListItems\n\t\t\t\t\t\t\titems={this.state.items}\n\t\t\t\t\t\t\tdeleteItem={this.deleteItem}\n\t\t\t\t\t\t\tsetUpdate={this.setUpdate}\n\t\t\t\t\t\t\tcompleteItem={this.completeItem}\n\t\t\t\t\t\t\tisComplete={this.state.isComplete}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}